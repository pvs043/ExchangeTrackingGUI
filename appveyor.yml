#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 1.0.0.{build}
image: WMF 5

#---------------------------------#
#      install configuration      #
#---------------------------------#
install:
    - ps: |
        Write-Host "Install prerequisites" -ForegroundColor Yellow
        $null = Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -ErrorAction Stop
        Install-Module -Name PSScriptAnalyzer -Repository PSGallery -Force -ErrorAction Stop
        Install-Module -Name Pester -Repository PSGallery -Force -ErrorAction Stop
        # Validate
        $RequiredModules = 'PSScriptAnalyzer','Pester'
        $InstalledModules = Get-Module -Name $RequiredModules -ListAvailable
        Write-Host "Installed modules:" -ForegroundColor Yellow
        $InstalledModules | ft Name, Version
        if ( ($InstalledModules.count -lt $RequiredModules.Count) -or ($Null -eq $InstalledModules)) {
            throw "Required modules are missing."
        } else {
            Write-Host "All required modules found!" -ForegroundColor Green
        }

#---------------------------------#
#      build configuration        #
#---------------------------------#
build_script:
    - ps: |
        Write-Host "Build project" -ForegroundColor Yellow
        Write-Host "Build version : $env:APPVEYOR_BUILD_VERSION"
        Write-Host "Branch        : $env:APPVEYOR_REPO_BRANCH"
        Write-Host "Repo          : $env:APPVEYOR_REPO_NAME"
        Write-Host "Running Build.ps1..." -ForegroundColor Yellow
        . .\Build.ps1
#    - cd ..\Build\ExchangeTrackingGUI
#    - mkdir "%ProgramFiles%\WindowsPowerShell\Modules\ExchangeTrackingGUI"
#    - copy ExchangeTrackingGUI.psm1 "%ProgramFiles%\WindowsPowerShell\Modules\ExchangeTrackingGUI"
#    - copy ExchangeTrackingGUI.psd1 "%ProgramFiles%\WindowsPowerShell\Modules\ExchangeTrackingGUI"
    - ps: |
        Import-Module -Name .\ExchangeTrackingGUI.psm1
        Write-Host "...completed!" -ForegroundColor Green

#---------------------------------#
#      test configuration         #
#---------------------------------#
test_script:
    - ps: |
        Write-Host "Running Test script" -ForegroundColor Yellow
        $testResultsFile = ".\TestsResults.xml"
        $res = Invoke-Pester -ExcludeTag 'Markdown','Examples' -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        $URI = "https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)"
        $WC  = New-Object 'System.Net.WebClient'
        Write-Host "About to upload file: $(Resolve-Path $testResultsFile)"
        try {
            $WC.UploadFile($URI, (Resolve-Path $testResultsFile))
        } catch {
            Write-Host "Uploading failed!" -ForegroundColor Red
        }

        if (($res.FailedCount -gt 0) -or ($res.PassedCount -eq 0) -or ($null -eq $res)) {
            throw "$($res.FailedCount) tests failed."
        } else {
            Write-Host "All tests passed!" -ForegroundColor Green
        }
